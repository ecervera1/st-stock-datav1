# -*- coding: utf-8 -*-
"""Portfolio Optimization 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mbmX81Pv2jAARRz-MEtAW3PFknSetj42
"""

# Description: This program attempts to optimize a UD SMIF Portfolio using efficient frontier and python

pip install scipy

pip install datetime

pip install seaborn

pip install pandas_datareader

pip install PyPortfolioOpt

# Import the python libraries
from pandas_datareader import data as web
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
import matplotlib.pyplot as plt
from scipy import stats
import seaborn as sns

# Stock tickeers in portfolio Edit this box for different assets in portfolio
assets= ['WMT','NKE','COST','AMZN']

#Assing weights to the stock. Edit this bos for different weights
weights = np.array([0.205,0.259,0.124,0.412])

#Get stock starting date
stockstartdate='2013-01-03'

#Stock ending date
today= datetime.today().strftime('%Y-%m-%d')
today

from datetime import date
from datetime import timedelta
yesterday = (datetime.today()- timedelta(days = 1)).strftime('%Y-%m-%d')
yesterday

# Create a dataframe to store the adjusted close price of stocks
df = pd.DataFrame()

# Store adjusted closed price of stock into df
for stock in assets:
    df[stock] = web.DataReader(stock, data_source='yahoo', start = stockstartdate, end=today)['Adj Close']

#Show the df
df

#Risk Free rate
from pandas_datareader import data

rf_rate_data= data.DataReader('DGS1MO','fred', start= yesterday, end=yesterday)
rf_rate=rf_rate_data["DGS1MO"]
rf_rate

#Visually show the stock / portfolio
title = 'Portfolio Adj. Close Price History'

#Get stocks
my_stocks = df

#Create and plot the graph
for c in my_stocks.columns.values:
    plt.plot(my_stocks[c], label=c)

plt.title(title)
plt.xlabel('Date', fontsize=18)
plt.legend(my_stocks.columns.values, loc='upper left')
plt.show

# Show daily simple return
returns = df.pct_change()
returns

port_ret = (df * weights).sum(axis = 1)
port_ret

#Number of days in a year
day_of_year = datetime.now().timetuple().tm_yday
day_of_year

# Annualized Covariance matrix
cov_matrix_annual= returns.cov() * day_of_year
cov_matrix_annual

CorrMatrix= returns.corr()
CorrMatrix

#Heatmap
import pandas as pd
import seaborn as sn
import matplotlib.pyplot as plt

sn.heatmap(CorrMatrix, annot=True)
plt.show()

# Portfolio Variance

portfolio_variance = np.dot(weights.T, np.dot(cov_matrix_annual,weights))
portfolio_variance

benchmark_price = web.get_data_yahoo('SPY',
                               start = stockstartdate,
                               end = today)

benchmark_ret = benchmark_price["Adj Close"].pct_change()
benchmark_ret

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas_datareader as web
from scipy import stats
import seaborn as sns
sns.regplot(benchmark_ret.values,
port_ret.values)
plt.xlabel("Benchmark Returns")
plt.ylabel("Portfolio Returns")
plt.title("Portfolio Returns vs Benchmark Returns")
plt.show()

(beta, alpha) = stats.linregress(benchmark_ret.values,
                port_ret.values)[0:2]

print("The portfolio beta is", round(beta, 4))

#Portfolio STD/ Volatility
portfolio_volatility = np.sqrt(portfolio_variance)
portfolio_volatility

#Annual Portfolio Return
portfolio_return=(np.sum(returns.mean()*weights)*day_of_year)
portfolio_return

#GET RISK FREE RATE FREE FROM LINE 15
SRatio = (portfolio_return-0.0262)/portfolio_volatility
SRatio

#Show expected annual return, Volatility, and Variance
percent_return= str(round(portfolio_return,2)*100)+'%'
percent_volatility=str(round(portfolio_volatility,2)*100)+'%'
percent_variance= str(round(portfolio_variance,2)*100)+'%'
Sharpe_Ratio= str(round(SRatio,2))

print('Expected Annual Return:' + percent_return)
print('Annual Volatility:' + percent_volatility)
print('Annual Variance:' + percent_variance)
print('Annual Sharpe Ratio:' + Sharpe_Ratio)

#Open packages to optimize portfolio
from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt import risk_models
from pypfopt import expected_returns

#Portfolio Optimization
#Calculate the expected returns and the annualised sample covariance of asset returns
mu = expected_returns.mean_historical_return(df)
S = risk_models.sample_cov(df)

#Optimize for Max Sharpe Ratio
ef = EfficientFrontier(mu, S)
weights = ef.max_sharpe()
cleaned_weights = ef.clean_weights()
print(cleaned_weights)
ef.portfolio_performance(verbose = True)

# Discrete allocation of each share per stock
from pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices
latest_prices = get_latest_prices(df)
wegihts = cleaned_weights
da = DiscreteAllocation(weights, latest_prices, total_portfolio_value = 14276)

allocation , leftover = da.lp_portfolio()
print('Discrete allocation:', allocation)
print('Funds Remaining; ${:.2f}'.format(leftover))



